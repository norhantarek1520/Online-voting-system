generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//---------------------------------- Tables -------------------------------------------------------------------------------------------------------
model NationalIDCards {
  id              String         @id @default(uuid())
  firstName       String
  lastName        String
  nationalId      String         @unique  // WILL NE THE  dateOfBirth_id
  address         String
  gender          EGender
  maritalStatus   EMaritalStatus
  religion        String
  occupation      String
  dateOfBirth     DateTime
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  user            User?          @relation("UserToNationalID") // Relation to User (One-to-One)
}

model User {
  id              String         @id @default(uuid())
  firstName       String
  lastName        String
  userName        String         @unique
  email           String         @unique
  password        String
  age             Int?
  dateOfBirth     DateTime
  role            EUserRoles     @default(VOTER)
  status          EUserStatus    @default(PENDING)
  userNationalId  String         @unique() 
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  nationalIdCard  NationalIDCards? @relation("UserToNationalID", fields: [userNationalId], references: [nationalId])
  candidateProfile Candidate?     @relation("UserToCandidate")
  votes           Vote[]         @relation("UserToVotes")
}

model Candidate {
  id                    String            @id @default(uuid())
  fullName              String
  bio                   String
  platformLink          String
  status                ECandidateStatus
  partyAffiliation      String?
  photoUrl              String?
  platform              String?
  experience            String?
  education             String?
  birthdate             DateTime?
  contactInfo           String?
  isApproved            Boolean?          @default(false)
  userId                String            @unique
  electionId            String
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  user                  User              @relation("UserToCandidate", fields: [userId], references: [id])
  election              Election          @relation("CandidateToElection", fields: [electionId], references: [id])
  votesReceived         Vote[]            @relation("CandidateToVotes")
  electionHistoryWinner ElectionHistory?  @relation("WinnerCandidateToElectionHistory")
}

model Election {
  id                        String                @id @default(uuid())
  title                     String
  description               String?
  votingStartDate           DateTime
  votingEndDate             DateTime
  status                    ElectionStatus
  candidateRegistrationStart DateTime
  candidateRegistrationEnd   DateTime
  resultsAnnouncedDate      DateTime?
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt

  candidates                Candidate[]           @relation("CandidateToElection")
  candidateRequirements     CandidateRequirements? @relation("ElectionToCandidateRequirements")
  votes                     Vote[]                @relation("ElectionToVotes")
  electionHistory           ElectionHistory?      @relation("ElectionToElectionHistory")
}

model CandidateRequirements {
  requirementId String   @id @default(uuid())
  age           Int
  education     String
  createdAt     DateTime
  electionId    String   @unique
  updatedAt     DateTime @updatedAt

  election      Election @relation("ElectionToCandidateRequirements", fields: [electionId], references: [id])
}

model Vote {
  id          String   @id @default(uuid())
  electionId  String
  voterId     String
  candidateId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  election    Election @relation("ElectionToVotes", fields: [electionId], references: [id])
  voter       User     @relation("UserToVotes", fields: [voterId], references: [id])
  candidate   Candidate @relation("CandidateToVotes", fields: [candidateId], references: [id])
}

model ElectionHistory {
  id                 String   @id @default(uuid())
  electionId         String   @unique
  winnerCandidateId  String   @unique
  loserCandidatesId  String[]
  totalVotes         Int
  resultDate         DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  election           Election  @relation("ElectionToElectionHistory", fields: [electionId], references: [id])
  winnerCandidate    Candidate @relation("WinnerCandidateToElectionHistory", fields: [winnerCandidateId], references: [id])
}
//------------------------------------- Enums -----------------------------------------------------------------------------------------------------
enum EUserRoles {
  SUPER_ADMIN
  ADMIN
  VOTER
  CANDIDATE
}

enum EUserStatus {
  ACTIVE
  PENDING
  DELETED
  BLOCKED
}

enum EGender {
  FEMALE
  MALE
}

enum EMaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum ElectionStatus {
  ACTIVE
  INACTIVE
}

enum ECandidateStatus {
  ACTIVE
  DISQUALIFIDE
  WITHDRAWN
}
